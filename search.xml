<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo个人博客搭建教程</title>
    <url>/2020/07/11/website-building-tutorial/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo个人博客搭建教程"><a href="#Hexo个人博客搭建教程" class="headerlink" title="Hexo个人博客搭建教程"></a>Hexo个人博客搭建教程</h1><h2 id="1-搭建前准备"><a href="#1-搭建前准备" class="headerlink" title="1 搭建前准备"></a>1 搭建前准备</h2><h3 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h3><p>需要安装git、node，最后安装hexo</p>
<h4 id="1-1-1-安装Git："><a href="#1-1-1-安装Git：" class="headerlink" title="1.1.1 安装Git："></a>1.1.1 安装Git：</h4><p>首先看电脑是否已经安装了git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git</span><br></pre></td></tr></table></figure>

<p>若提示not founded则进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#未安装homebrew则先安装homebrew</span></span><br><span class="line">$ /bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装git</span></span><br><span class="line">$ brew install git</span><br></pre></td></tr></table></figure>

<p>查看git版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<p>显示如下则安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fanziqi@macbook-pro blog % git --version</span><br><span class="line">git version 2.21.0 (Apple Git-122)</span><br></pre></td></tr></table></figure>

<h4 id="1-1-2-安装node"><a href="#1-1-2-安装node" class="headerlink" title="1.1.2 安装node"></a>1.1.2 安装node</h4><p>点击访问 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node官网</a> 下载安装</p>
<p>查看node版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure>

<h4 id="1-1-3-安装并配置Hexo"><a href="#1-1-3-安装并配置Hexo" class="headerlink" title="1.1.3 安装并配置Hexo"></a>1.1.3 安装并配置Hexo</h4><p>安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>创建blog文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此目录可以任意更改</span></span><br><span class="line">$ mkdir blog</span><br><span class="line"><span class="comment"># 进入blog文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># init初始化hexo</span></span><br><span class="line">$ hexo init</span><br><span class="line">开启本地服务</span><br><span class="line"><span class="comment"># hexo s</span></span><br></pre></td></tr></table></figure>

<p>若出现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>

<p>则在浏览器输入 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到本地运行的博客首页</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/2.png" alt></p>
<h3 id="1-2-注册并创建仓库"><a href="#1-2-注册并创建仓库" class="headerlink" title="1.2 注册并创建仓库"></a>1.2 注册并创建仓库</h3><p>这里讲解两个仓库</p>
<h4 id="1-2-1-GitHub仓库"><a href="#1-2-1-GitHub仓库" class="headerlink" title="1.2.1 GitHub仓库"></a>1.2.1 GitHub仓库</h4><p>进入<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>官网注册一个账号，并记住用户名，下一步要用到</p>
<p>新建一个仓库，点击new repository</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/3.png" alt></p>
<p>进入这一步，仓库名字必须是<strong>用户名.github.io</strong>，然后点击创建</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/4.png" alt></p>
<p>配置ssh key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> .ssh</span><br></pre></td></tr></table></figure>

<p>新建ssh key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"你的邮件地址"</span></span><br></pre></td></tr></table></figure>

<p>出现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/fanziqi/.ssh/id_rsa):</span><br></pre></td></tr></table></figure>

<p>则输入ssh的名字，比如GitHub，然后回车</p>
<p>再连续按两次回车，最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\刚刚起的名字.pub</code>文件，打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/6.png" alt></p>
<p>粘贴到key里面，title任意，点击保存。</p>
<p>测试是否成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p>提示 <code>Are you sure you want to continue connecting (yes/no)?</code>输入yes，提示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>则配置成功</p>
<h4 id="1-2-2-Coding仓库"><a href="#1-2-2-Coding仓库" class="headerlink" title="1.2.2 Coding仓库"></a>1.2.2 Coding仓库</h4><p>由于GitHub服务器在国外，访问速度非常慢。所以建议使用国内的Coding</p>
<p>进入<a href="https://coding.net/" target="_blank" rel="noopener">coding官网</a>，点击免费注册</p>
<p>注册成功后新建一个代码托管项目，名称是用户名，并勾选readme<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/5.png" alt></p>
<p>进入代码仓库，点击左下角项目设置–项目与成员–功能开关–打开持续部署</p>
<p>进入项目–持续部署–静态网站</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/7.png" alt></p>
<p>填好名称后并保存</p>
<p>经测试，coding使用ssh公钥无法上传代码，则通过普通的输入用户名密码的方法上传。</p>
<h3 id="1-3-关联到仓库"><a href="#1-3-关联到仓库" class="headerlink" title="1.3 关联到仓库"></a>1.3 关联到仓库</h3><p>在创建的blog文件夹里找到_config.yml文件并打开，在文档最后找到</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br></pre></td></tr></table></figure>

<p>将其修改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">github:</span></span><br><span class="line">      <span class="string">git@github.com:你的GitHub账号/你的GitHub账号.github.io.git</span></span><br><span class="line">    <span class="attr">coding:</span></span><br><span class="line">      <span class="string">https://e.coding.net/你的coding账号/你的coding账号/你的coding账号.git</span></span><br><span class="line">      <span class="comment">#git@e.coding.net:fanis/fanis/fanis.git 此方法暂时不好用</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#产生静态网页</span></span><br><span class="line">$ hexo g</span><br><span class="line"><span class="comment"># 部署到GitHub/coding上</span></span><br><span class="line">$ hexo d</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可使用hexo g &amp;&amp; hexo d</span></span><br></pre></td></tr></table></figure>

<p>进入<code>http://你的名字.github.io/</code>或<code>http://coding静态网站中的一串代码.coding-pages.com/</code>即可看到hexo博客</p>
<h3 id="1-4-绑定个人域名"><a href="#1-4-绑定个人域名" class="headerlink" title="1.4 绑定个人域名"></a>1.4 绑定个人域名</h3><p>如果想使用自己购买的域名进行访问，则需要将个人域名cname解析到<code>你的名字.github.io/</code>或<code>coding静态网站中的一串代码.coding-pages.com/</code>上</p>
<h4 id="1-4-1-域名配置"><a href="#1-4-1-域名配置" class="headerlink" title="1.4.1 域名配置"></a>1.4.1 域名配置</h4><p>我的域名购买于阿里云，别的域名注册商大同小异。</p>
<p>打开域名解析页面</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/8.png" alt></p>
<p>天价一个CNAME类型的解析，解析到coding或GitHub上</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/9.png" alt></p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/10.png" alt></p>
<p>然后在blog/source/文件夹下创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p>注意⚠️国内访问GitHub很慢，如果想达到分流的效果在解析的时候GitHub解析线路选择境外，coding选择境内，即可实现国外用户访问GitHub而国内用户访问coding。</p>
<h4 id="1-4-2-GitHub设置"><a href="#1-4-2-GitHub设置" class="headerlink" title="1.4.2 GitHub设置"></a>1.4.2 GitHub设置</h4><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/11.png" alt></p>
<h4 id="1-4-3-coding设置"><a href="#1-4-3-coding设置" class="headerlink" title="1.4.3 coding设置"></a>1.4.3 coding设置</h4><p>进入项目，点击持续部署下的静态网站，设置之前创建的静态网站，下拉找到自定义域名，绑定自己的域名，并获取证书</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/12.png" alt></p>
<h4 id="1-4-4-配置CNAME文件"><a href="#1-4-4-配置CNAME文件" class="headerlink" title="1.4.4 配置CNAME文件"></a>1.4.4 配置CNAME文件</h4><p>在blog/source/中创建一个名为CNAME文件，不要后缀。写上你的域名。</p>
<p>最后重新生成静态网站并上传，就可以通过访问自己的域名来访问GitHub/coding上的blog了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h2 id="2-使用博客"><a href="#2-使用博客" class="headerlink" title="2 使用博客"></a>2 使用博客</h2><h3 id="2-1-基本配置"><a href="#2-1-基本配置" class="headerlink" title="2.1 基本配置"></a>2.1 基本配置</h3><p>hexo最主要的配置是_config.yml这个文件，详细可参考<a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方的配置</a>描述。这里举几个常用的例子</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span>  <span class="comment">#网页标题</span></span><br><span class="line"><span class="attr">author:</span> <span class="comment">#作者名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment">#修改网页语言为英文</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://你的网站</span></span><br></pre></td></tr></table></figure>

<h3 id="2-2-更换主题"><a href="#2-2-更换主题" class="headerlink" title="2.2 更换主题"></a>2.2 更换主题</h3><p>默认的主题很丑，<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo官方主题页</a>这里的主题都可以更换。我选的是butterfly主题，界面美观功能强大。</p>
<h4 id="2-2-1-安装主题"><a href="#2-2-1-安装主题" class="headerlink" title="2.2.1 安装主题"></a>2.2.1 安装主题</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure>

<p>应用主题</p>
<p>修改站點配置文件_config.yml，把主題改為butterfly</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>

<p>安装pub渲染器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>

<h4 id="2-2-2-配置主题"><a href="#2-2-2-配置主题" class="headerlink" title="2.2.2 配置主题"></a>2.2.2 配置主题</h4><p>为了主題的平滑升級, Butterfly 使用了 data files 特性。</p>
<p>推薦把主題默認的配置文件_config.yml複製到 Hexo 工作目錄下的source/_data/butterfly.yml，如果source/_data的目錄不存在那就創建一個。</p>
<p>打开source/_data/butterfly.yml</p>
<p>首先汉化导航栏，更改将第一段代码更改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">菜单||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">音乐</span> <span class="string">||</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">电影</span> <span class="string">||</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">留言板:</span> <span class="string">/messageboard/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-paper-plane</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure>

<p>创建标签页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<p>找到source/tags/index.md这个文件，修改为</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "tags"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>创建分类页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<p>找到source/categories/index.md这个文件，修改为</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "categories"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>创建友情链接页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page link</span><br></pre></td></tr></table></figure>

<p>找到source/link/index.md这个文件，修改为</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: "link"</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>添加友情链接</p>
<p>在Hexo博客目錄中的source/_data，創建一個文件link.yml</p>
<p>内容如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">class:</span></span><br><span class="line">  <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="attr">1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ZSTU</span> <span class="comment">#这里举一个例子</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">http://www.zstu.edu.cn/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">http://www.zstu.edu.cn//avatar.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">浙江理工大学官网</span></span><br><span class="line"><span class="comment">#    2:</span></span><br><span class="line"><span class="comment">#      name: xxxxxx</span></span><br><span class="line"><span class="comment">#      link: https://www.xxxxxxcn/</span></span><br><span class="line"><span class="comment">#      avatar: https://xxxxx/avatar.png</span></span><br><span class="line"><span class="comment">#      descr: xxxxxxx</span></span><br></pre></td></tr></table></figure>

<p>注：class_name和class_desc支持html格式書寫，如不需要，也可以留空。</p>
<p>音乐页使用插件<a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a>，电影页使用插件<a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">hexo-douban</a>，请自行查看网页上的使用说明，这里不再赘述。</p>
<p>404页面</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">"頁面沒有找到"</span></span><br><span class="line">  <span class="attr">background:</span></span><br></pre></td></tr></table></figure>

<p>代码</p>
<p>代码高亮主题</p>
<p>Butterfly 支持6種代碼高亮樣式：</p>
<ul>
<li>default</li>
<li>darker</li>
<li>pale night</li>
<li>light</li>
<li>ocean</li>
<li>mac</li>
</ul>
<p>修改<code>highlight_theme: light</code>即可</p>
<p>default：</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/13.png" alt="default"></p>
<p>darker：<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/14.png" alt="darker"></p>
<p>pale night：<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/15.png" alt="pale night"></p>
<p>light：<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/16.png" alt="light"></p>
<p>ocean：<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/17.png" alt="ocean"></p>
<p>mac：<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/18.png" alt="mac"></p>
<p>代码复制功能</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>代碼框展開/關閉</p>
<p>在默認情況下，代碼框自動展開，可設置是否所有代碼框都關閉狀態，點擊&gt;可展開代碼</p>
<ul>
<li>true 全部代碼框不展開，需點擊&gt;打開</li>
<li>false 代碼狂展開，有&gt;點擊按鈕</li>
<li>none 不顯示&gt;按鈕</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代碼框不展開，需點擊 '&gt;' 打開</span></span><br></pre></td></tr></table></figure>

<p>社交图标</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># social settings (社交圖標設置)</span></span><br><span class="line"><span class="comment"># formal:</span></span><br><span class="line"><span class="comment">#   icon: link || the description</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/fanziqi614</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:fzq614@qq.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure>

<p>这会展示在主页头像下面</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/19.png" alt></p>
<p>顶部图</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the banner image of home page 将路径填到这里</span></span><br><span class="line"><span class="attr">index_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if the banner of page not setting,it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">https://i.loli.net/2020/05/01/IuWi8QbHvzjlOPw.jpg</span></span><br></pre></td></tr></table></figure>

<p>文档封面</p>
<p>修改position即可改变封面位置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page (封面顯示的位置)</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">  <span class="comment"># When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br><span class="line"><span class="comment">#    - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span></span><br></pre></td></tr></table></figure>

<p>文章版权</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure>

<p>打赏功能</p>
<p>在文末显示</p>
<p>在/blog/themes/butterfly/source/下创建wechat.jpg和alipay.jpg收款码图片</p>
<p>然后更改butterfly代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sponsor/reward</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">wechat</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">alipay</span></span><br></pre></td></tr></table></figure>

<p>头像</p>
<p>在/blog/themes/butterfly/source/下创建avatar.png作为头像</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">vatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 頭像會一直轉圈</span></span><br></pre></td></tr></table></figure>

<p>评论系统</p>
<p>我选择的是valine评论系统，更加美观大方，易于管理。</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/20.png" alt></p>
<p>进入<a href="https://leancloud.cn/，注册账号实名认证验证邮箱，创建应用" target="_blank" rel="noopener">https://leancloud.cn/，注册账号实名认证验证邮箱，创建应用</a></p>
<p>在设置中记下应用keys</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/21.png" alt></p>
<p>填到下面的对应位置，并修改enable为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># valine</span></span><br><span class="line"><span class="comment"># https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># if you want use valine,please set this value is true</span></span><br><span class="line">  <span class="attr">appId:</span>  <span class="comment"># leancloud application app id</span></span><br><span class="line">  <span class="attr">appKey:</span>  <span class="comment"># leancloud application app key</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># comment list page size</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span> <span class="comment"># gravatar style https://valine.js.org/#/avatar</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-CN</span> <span class="comment"># i18n: zh-CN/zh-TW/en/ja</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Please</span> <span class="string">leave</span> <span class="string">your</span> <span class="string">footprints</span> <span class="comment"># valine comment input placeholder(like: Please leave your footprints )</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick</span> <span class="comment">#valine comment header info (nick/mail/link)</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Record reviewer IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span></span><br><span class="line">  <span class="attr">bg:</span> <span class="comment"># valine background</span></span><br><span class="line">  <span class="attr">emojiCDN:</span> <span class="comment"># emoji CDN</span></span><br><span class="line">  <span class="attr">enableQQ:</span> <span class="literal">false</span> <span class="comment"># enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span></span><br><span class="line">  <span class="attr">requiredFields:</span> <span class="string">nick</span> <span class="comment"># required fields (nick/mail)</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># dispaly comment count in top_img</span></span><br></pre></td></tr></table></figure>

<p>注意⚠️guest_info:和requiredFields:一定要对应，否则无法发送评论。</p>
<p>侧边栏设置</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/22.png" alt></p>
<p>可自行设置应用的开关</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># 手機頁面（ 顯示寬度 &lt; 768px ）是否顯示aside內容</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">  <span class="attr">card_webinfo:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>动画效果</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Background effects (背景特效)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_ribbon (靜止彩帶背景)</span></span><br><span class="line"><span class="comment"># See: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dynamic ribbon (動態彩帶)</span></span><br><span class="line"><span class="attr">canvas_ribbon_piao:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">'0,0,255'</span> <span class="comment">#color of lines, default: '0,0,0'; RGB values: (R,G,B).(<span class="doctag">note:</span> use ',' to separate.)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span> <span class="comment"># the opacity of line (0~1), default: 0.5.</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background, default: -1.</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># the number of lines, default: 99.</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-创建新博客"><a href="#2-3-创建新博客" class="headerlink" title="2.3 创建新博客"></a>2.3 创建新博客</h3><p>在_config.yml配置文件中，修改为 post_asset_folder: true， 然后新建一篇文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new post <span class="string">"文件名"</span></span><br></pre></td></tr></table></figure>

<p>这个时候source下会出现一个.md文件和 同名文件夹</p>
<p>用typora等md编辑器即可编辑，图片放在同名文件夹中。</p>
<p>打开md文件，Front-matter 是檔案最上方以 — 分隔的區域，用於指定個別檔案的變數。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line">updated:</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top_img:</span><br><span class="line">comments：</span><br><span class="line">cover:  </span><br><span class="line">toc:  </span><br><span class="line">toc_number:</span><br><span class="line">auto_open:</span><br><span class="line">copyright:</span><br><span class="line">mathjax:</span><br><span class="line">katex:</span><br><span class="line">aplayer：</span><br><span class="line">highlight_shrink：</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>参数用法：<img src= "/img/loading.gif" data-src="/2020/07/11/website-building-tutorial/23.png" alt></p>
<p>文章写在Front-matter下方</p>
<p>写好后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g %% hexo d</span><br></pre></td></tr></table></figure>

<p>即可在网站上看到</p>
<h2 id="3-hexo常用命令"><a href="#3-hexo常用命令" class="headerlink" title="3 hexo常用命令"></a>3 hexo常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> <span class="comment">#新建⽂章</span></span><br><span class="line">hexo p == hexo publish</span><br><span class="line">hexo g == hexo generate<span class="comment">#⽣成</span></span><br><span class="line">hexo s == hexo server <span class="comment">#启动服务预览</span></span><br><span class="line">hexo d == hexo deploy<span class="comment">#部署</span></span><br><span class="line"></span><br><span class="line">hexo server <span class="comment">#Hexo 会监视⽂件变动并⾃动更新，您⽆须重启服务器。</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端⼝</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#⾃定义 IP</span></span><br><span class="line">hexo clean <span class="comment">#清除缓存 ⽹⻚正常情况下可以忽略此条命令</span></span><br><span class="line">hexo g <span class="comment">#⽣成静态⽹⻚</span></span><br><span class="line">hexo d <span class="comment">#开始部署</span></span><br><span class="line"></span><br><span class="line">hexo generate <span class="comment">#使⽤ Hexo ⽣成静态⽂件快速⽽且简单</span></span><br><span class="line">hexo generate --watch <span class="comment">#监视⽂件变动</span></span><br><span class="line"></span><br><span class="line">两个命令的作⽤是相同的</span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"></span><br><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建⽂章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建⻚⾯</span></span><br><span class="line">hexo generate <span class="comment">#⽣成静态⻚⾯⾄public⽬录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端⼝（默认端⼝4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy⽬录部署到GitHub</span></span><br><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">hexo new photo <span class="string">"My Gallery"</span></span><br><span class="line">hexo new <span class="string">"Hello World"</span> --lang tw</span><br></pre></td></tr></table></figure>



<p>祝建站成功～</p>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32_for_mac</title>
    <url>/2020/07/29/stm32-for-mac/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>我的主力机是macOS系统，但是最近在学习stm32的时候发现Keil只有Windows的版本，虽然用Parallel虚拟机可以融合双系统来使用Keil，但是开发过程中虚拟的win进程占用了不少内存，电脑大量发热，续航也下降了。这里介绍一种在macOS上开发stm32的方法。</p>
<h2 id="2-检查ST-Link驱动"><a href="#2-检查ST-Link驱动" class="headerlink" title="2.检查ST-Link驱动"></a>2.检查ST-Link驱动</h2><p>首先检查mac是否安装了stlink驱动。将单片机通电，通过ST-Link连接到电脑，打开<code>系统信息.app</code>，在<em>硬件-&gt;USB-&gt;USB 3.1 总线</em>下可以看到STM32 STLink驱动已经安装，说明此驱动在macos上免驱。</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/1.png" alt="1"></p>
<h2 id="3-安装sw4stm32"><a href="#3-安装sw4stm32" class="headerlink" title="3.安装sw4stm32"></a>3.安装sw4stm32</h2><p>在<a href="http://openstm32.org/HomePage" target="_blank" rel="noopener">OpenSTM32</a>官网上，下滑找到到<code>Step 1</code>，点最后一句的<code>download area</code>。</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/2.png" alt="2"></p>
<p>点击，即可下载macOS的版本，，但是官网下载速度奇慢，而且需要注册账号，有时还会遇到无法注册的问题。这里提供v2.6版本的安装包<a href>点击下载</a></p>
<p>下载后，打开终端，cd到<code>install_sw4stm32_macos_64bits-v2.6.run</code>所在路径，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 755 install_sw4stm32_macos_64bits-v2.6.run</span><br><span class="line">./install_sw4stm32_macos_64bits-v2.6.run</span><br></pre></td></tr></table></figure>

<p>等待一段时间弹出安装器</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/5.png" alt="5"></p>
<p>next安装</p>
<p>这一步记得检查stlinkserver是否勾选</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/6.png" alt="6"></p>
<p>点击next</p>
<p>然后记得到终端输入密码，否则安装不会进行。</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/7.png" alt="7"></p>
<p>接着会弹出</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/8.png" alt="8"></p>
<p>点击 <code>yes</code> 即可，一会即可安装完成。</p>
<p>打开装好的 SystemWorkbench, 先选择一个文件夹作为工作空间:</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/9.png" alt="9"></p>
<p>然后, 会自动安装ARM工具链:</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/10.png" alt="10"></p>
<h2 id="4-安装stlink工具"><a href="#4-安装stlink工具" class="headerlink" title="4.安装stlink工具"></a>4.安装stlink工具</h2><p>stlink是命令行工具，需要使用命令行安装工具，推荐brew。</p>
<p>未安装brew的先安装brew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure>

<p>用brew安装stlink</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install stlink</span><br></pre></td></tr></table></figure>

<h2 id="6-安装STM32CubeMX"><a href="#6-安装STM32CubeMX" class="headerlink" title="6.安装STM32CubeMX"></a>6.安装STM32CubeMX</h2><p>前言：请确保已经安装最新的Java，安装方式请百度</p>
<p> <a href="http://www.st.com/en/development-tools/stm32cubemx.html" target="_blank" rel="noopener">下载STM32CubeMX</a>, 下面的<code>Get Software</code>。 文件名<code>en.stm32cubemx.zip</code>, 下载完解压, 你会发现一个名为<code>SetupSTM32CubeMX-4.10.0.exe</code>的文件。这个文件不是Windows PE文件（Windows可执行文件格式），它只是一个JAR压缩文件。因此，使用终端即可安装:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo java -jar ~/Downloads/SetupSTM32CubeMX-4.10.0.exe</span><br></pre></td></tr></table></figure>

<p>sudo需要输入密码，按提示输入即可，会弹出安装器</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/3.png" alt="3"></p>
<p>next安装。</p>
<p>按照安装指导。默认情况下，该程序被安装在/Applications/STMicroelectronics/STM32Cube/STM32CubeMX</p>
<p>在启动台可以看到刚刚安装的STM32CubeMX。</p>
<p><img src= "/img/loading.gif" data-src="/2020/07/29/stm32-for-mac/4.png" alt="4"></p>
]]></content>
      <tags>
        <tag>stm32</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32库函数及缩写</title>
    <url>/2020/08/01/stm32-suo/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="缩写定义"><a href="#缩写定义" class="headerlink" title="缩写定义"></a>缩写定义</h2><table>
<thead>
<tr>
<th align="left">缩写</th>
<th>外设/单元</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ADC</td>
<td>模数转换器</td>
</tr>
<tr>
<td align="left">BKP</td>
<td>备份寄存器</td>
</tr>
<tr>
<td align="left">CAN</td>
<td>控制器局域网模块</td>
</tr>
<tr>
<td align="left">DMA</td>
<td>直接内存存取控制器</td>
</tr>
<tr>
<td align="left">EXTI</td>
<td>外部中断事件控制器</td>
</tr>
<tr>
<td align="left">FLASH</td>
<td>闪存存储器</td>
</tr>
<tr>
<td align="left">GPIO</td>
<td>通用输入输出</td>
</tr>
<tr>
<td align="left">I2C</td>
<td>内部集成电路</td>
</tr>
<tr>
<td align="left">IWDG</td>
<td>独立看门狗</td>
</tr>
<tr>
<td align="left">NVIC</td>
<td>嵌套中断向量列表控制器</td>
</tr>
<tr>
<td align="left">PWR</td>
<td>电源/功耗控制</td>
</tr>
<tr>
<td align="left">RCC</td>
<td>复位与时钟控制器</td>
</tr>
<tr>
<td align="left">RTC</td>
<td>实时时钟</td>
</tr>
<tr>
<td align="left">SPI</td>
<td>串行外设接口</td>
</tr>
<tr>
<td align="left">SysTick</td>
<td>系统嘀嗒定时器</td>
</tr>
<tr>
<td align="left">TIM</td>
<td>通用定时器</td>
</tr>
<tr>
<td align="left">TIM1</td>
<td>高级控制定时器</td>
</tr>
<tr>
<td align="left">USART</td>
<td>通用同步异步接收发射端</td>
</tr>
<tr>
<td align="left">WWDG</td>
<td>窗口看门狗</td>
</tr>
</tbody></table>
<h2 id="固态函数库命名规则"><a href="#固态函数库命名规则" class="headerlink" title="固态函数库命名规则"></a>固态函数库命名规则</h2><p>PPP 表示任一外设缩写，例如：ADC。</p>
<p>系统、源程序文件和头文件命名都以<strong>“stm32f10x_”</strong>作为开头，例如：<strong>stm32f10x_conf.h</strong>。</p>
<p>常量仅被应用于一个文件的，定义于该文件中；被应用于多个文件的，在对应头文件中定义。所有常量都由英文字母大写书写。</p>
<p>寄存器作为常量处理。他们的命名都由英文字母大写书写。在大多数情况下，他们采用与缩写规范与本用户手册一致。</p>
<p>外设函数的命名以该外设的缩写加下划线为开头。每个单词的第一个字母都由英文字母大写书写，例如：<strong>SPI_SendData**</strong>。** 在函数名中，只允许存在一个下划线，用以分隔外设缩写和函数名的其它部分。</p>
<p>名为 <strong>PPP_Init</strong> 的函数，其功能是根据 <strong>PPP_InitTypeDef</strong> 中指定的参数，初始化外设 PPP，例如 <strong>TIM_Init</strong>. 文档和库规范</p>
<p>名为 <strong>PPP_DeInit</strong> 的函数，其功能为复位外设 PPP 的所有寄存器至缺省值，例如 <strong>TIM_DeInit</strong>. </p>
<p>名为 <strong>PPP_StructInit</strong> 的函数，其功能为通过设置 <strong>PPP_InitTypeDef</strong> 结构中的各种参数来定义外设的功能，例如：<strong>USART_StructInit</strong></p>
<p>名为 <strong>PPP_Cmd</strong> 的函数，其功能为使能或者失能外设 PPP，例如： <strong>SPI_Cmd</strong>. </p>
<p>名为 <strong>PPP_ITConfig</strong> 的函数，其功能为使能或者失能来自外设 PPP 某中断源，例如： <strong>RCC_ITConfig</strong>. </p>
<p>名为 <strong>PPP_DMAConfig</strong> 的函数，其功能为使能或者失能外设 PPP 的 DMA 接口，例如：<strong>TIM1_DMAConfig</strong>. </p>
<p>用以配置外设功能的函数，总是以字符串“Config”结尾，例如 <strong>GPIO_PinRemapConfig</strong>. </p>
<p>名为 <strong>PPP_GetFlagStatus</strong> 的函数，其功能为检查外设 PPP 某标志位被设置与否，例如：<strong>I2C_GetFlagStatus</strong>. </p>
<p>名为 <strong>PPP_ClearFlag</strong> 的函数，其功能为清除外设 PPP 标志位，例如：<strong>I2C_ClearFlag</strong>. </p>
<p>名为 <strong>PPP_GetITStatus</strong> 的函数，其功能为判断来自外设 PPP 的中断发生与否，例如：<strong>I2C_GetITStatus</strong>. </p>
<p>名 为 <strong>PPP_ClearITPendingBit</strong> 的函数，其功能为清除外设 PPP 中断待处理标志位，例如：<strong>I2C_ClearITPendingBit</strong>. </p>
]]></content>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>利用注册表实现软件免安装</title>
    <url>/2020/08/01/regedit/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我有一个Windows虚拟机，平时用solidworks或者Altium Designer这类软件都在虚拟机中运行，最近电脑内存吃紧，软件在虚拟机中的垃圾缓存越来越大，所以想把软件迁移到外置的系统盘里，由于这些软件安装起来十分麻烦，需要绿色/汉化一系列步骤，所以如果能将软件本地化就很方便了。这里利用导出软件注册表实现软件在不同系统中迁移。</p>
<p>这里以<strong>Altium Designer</strong>为例</p>
<p>1.<strong>win+r</strong>打开运行，输入<strong>regedit</strong>会车，打开<strong>注册表编辑器</strong></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/1.png" alt="1"></p>
<p>2.点击注册表编辑器工具栏中的<strong>编辑</strong>，在下拉菜单中点击：<strong>查找</strong></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/2.png" alt="2"></p>
<p>在查找窗口的<strong>查找目标</strong>中输入软件名称，如：<strong>Altium Designer</strong>，点击：<strong>查找下一个</strong>；</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/3.png" alt="3"></p>
<p>找到该软件的最上层路径，这里为<strong>Altium</strong></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/4.png" alt="4"></p>
<p>3.右击该文件夹，选择导出</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/5.png" alt="5"></p>
<p>文件名任意，点击保存<br><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/6.png" alt="6"></p>
<p>将保存的注册表文件拷贝到新电脑中备用</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/7.png" alt="7"></p>
<p>4.到<strong>C:\Program Files</strong>找到软件的安装路径，拷贝到新电脑的同名文件夹中</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/8.png" alt="8"></p>
<p>5.在新电脑中双击注册表把这个注册信息导入注册表编辑器</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/01/regedit/9.png" alt="9"></p>
<p>点击是，即可无需安装正常使用软件。</p>
]]></content>
      <tags>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32学习笔记</title>
    <url>/2020/08/06/stm32/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>STM32 命名规则</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/06/stm32/1.png" alt="1"></p>
<hr>
<h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><p>头文件：stm32f10x_gpio.h</p>
<p>源文件：stm32f10x_gpio.c</p>
<h3 id="重要函数："><a href="#重要函数：" class="headerlink" title="重要函数："></a>重要函数：</h3><ul>
<li><p>初始化函数：<br><code>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);</code></p>
<p>初始化一个或者多个IO口（同一组）的工作方式和速度。</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">  	<span class="keyword">uint16_t</span> GPIO_Pin;                           <span class="comment">//指定要初始化的IO口         </span></span><br><span class="line">    GPIOSpeed_TypeDef GPIO_Speed; <span class="comment">//设置IO口输出速度</span></span><br><span class="line">    GPIOMode_TypeDef GPIO_Mode;    <span class="comment">//设置工作模式：8种中的一个</span></span><br><span class="line">	&#125;GPIO_InitTypeDef;</span><br><span class="line"></span><br><span class="line">GPIOx: GPIOA~GPIOG</span><br></pre></td></tr></table></figure>

<p>​    GPIO_Init函数初始化样例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line">	</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; <span class="comment">//LED0--&gt;PB.5 端口配置</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//IO口速度为50MHz</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure);	 <span class="comment">//根据设定参数初始化GPIOB.5</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>2个读取输入电平函数：</p>
<ul>
<li><p><code>uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：读取某个GPIO的输入电平。实际操作的是GPIOx_IDR寄存器。</p>
<p>例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5);<span class="comment">//读取GPIOA.5的输入电平</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);</code><br>作用：读取某组GPIO的输入电平。实际操作的是GPIOx_IDR寄存器。<br>例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_ReadInputData(GPIOA);<span class="comment">//读取GPIOA组中所有io口输入电平</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>2个读取输出电平函数：</p>
<ul>
<li><p><code>uint8_t GPIO_ReadOutputDataBit (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：读取某个GPIO的输出电平。实际操作的是GPIO_ODR寄存器。</p>
<p>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5);<span class="comment">//读取GPIOA.5的输出电平</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);</code><br>作用：读取某组GPIO的输出电平。实际操作的是GPIO_ODR寄存器。<br>例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_ReadOutputData(GPIOA);<span class="comment">//读取GPIOA组中所有io口输出电平</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>4个设置输出电平函数：</p>
<ul>
<li><code>void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：设置某个IO口输出为高电平（1）。实际操作BSRR寄存器</li>
<li><code>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：设置某个IO口输出为低电平（0）。实际操作的BRR寄存器。</li>
<li><code>void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);</code></li>
<li><code>void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);</code><br> 这两个函数不常用，也是用来设置IO口输出电平。</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按键输入：</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> u8 key_up=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(mode==<span class="number">1</span>) key_up=<span class="number">1</span>;<span class="comment">//支持连续按</span></span><br><span class="line">      <span class="keyword">if</span>（key_up &amp;&amp;  KEY按下）</span><br><span class="line">      &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);<span class="comment">//延时，防抖</span></span><br><span class="line">        key_up=<span class="number">0</span>;<span class="comment">//标记这次key已经按下</span></span><br><span class="line">        <span class="keyword">if</span>(KEY确实按下)</span><br><span class="line">          &#123;</span><br><span class="line">           <span class="keyword">return</span> KEY_VALUE;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY没有按下)  key_up=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> 没有按下</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="RCC"><a href="#RCC" class="headerlink" title="RCC"></a>RCC</h2><p>头文件: stm32f10x_rcc.h</p>
<p>源文件:stm32f10x_rcc.c</p>
<ol>
<li><p>时钟使能配置:</p>
<p>  <code>RCC_LSEConfig()</code> 、<code>RCC_HSEConfig()</code>、<code>RCC_HSICmd()</code> 、 <code>RCC_LSICmd()</code> 、 <code>RCC_PLLCmd()</code> ……</p>
</li>
<li><p>时钟源相关配置：<br>   <code>RCC_PLLConfig ()</code>、 <code>RCC_SYSCLKConfig()</code> 、<code>RCC_RTCCLKConfig()</code> …</p>
</li>
<li><p>分频系数选择配置：<br>  <code>RCC_HCLKConfig()</code> 、 <code>RCC_PCLK1Config()</code> 、 <code>RCC_PCLK2Config()</code>…</p>
</li>
<li><p>外设时钟使能：<br>  <code>RCC_APB1PeriphClockCmd():</code>  //APB1线上外设时钟使能<br>  <code>RCC_APB2PeriphClockCmd();</code>  //APB2线上外设时钟使能<br>  <code>RCC_AHBPeriphClockCmd();</code>   //AHB线上外设时钟使能</p>
</li>
<li><p>其他外设时钟配置：</p>
<p> <code>RCC_ADCCLKConfig ();</code>  <code>RCC_RTCCLKConfig();</code></p>
</li>
<li><p>状态参数获取参数：<br> <code>RCC_GetClocksFreq();</code><br> <code>RCC_GetSYSCLKSource();</code><br> <code>RCC_GetFlagStatus()</code></p>
</li>
<li><p>RCC中断相关函数 :<br> <code>RCC_ITConfig()</code> 、<code>RCC_GetITStatus()</code> 、 <code>RCC_ClearITPendingBit()</code>…</p>
</li>
</ol>
<hr>
<h2 id="NVIC中断优先级分组"><a href="#NVIC中断优先级分组" class="headerlink" title="NVIC中断优先级分组"></a>NVIC中断优先级分组</h2><ul>
<li><p>中断管理方法：</p>
<p>首先，对STM32中断进行分组，组0~4。同时，对每个中断设置一个抢占优先级和一个响应优先级值。</p>
</li>
<li><p>抢占优先级 &amp; 响应优先级区别：</p>
<p>高优先级的抢占优先级是可以打断正在进行的低抢占优先级中断的。</p>
<p>抢占优先级相同的中断，高响应优先级不可以打断低响应优先级的中断。</p>
<p>抢占优先级相同的中断，当两个中断同时发生的情况下，哪个响应优先级高，哪个先执行。</p>
<p>如果两个中断的抢占优先级和响应优先级都是一样的话，则看哪个中断先发生就先执行；</p>
</li>
<li><p>一般情况下，系统代码执行过程中，只设置一次中断优先级分组，比如分组2，设置好分组之后一般不会再改变分组。随意改变分组会导致中断管理混乱，程序出现意想不到的执行结果。</p>
</li>
<li><p>中断优先级分组函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));</span><br><span class="line">  SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>中断参数初始化函数：</p>
<p><code>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannel; <span class="comment">//设置中断通道</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelPreemptionPriority;<span class="comment">//设置响应优先级</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelSubPriority; <span class="comment">//设置抢占优先级</span></span><br><span class="line">  FunctionalState NVIC_IRQChannelCmd; <span class="comment">//使能/使能</span></span><br><span class="line">&#125; NVIC_InitTypeDef;</span><br></pre></td></tr></table></figure>

<p>例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//串口1中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">1</span> ;<span class="comment">// 抢占优先级为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;<span class="comment">// 子优先级位2</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);	<span class="comment">//根据上面指定的参数初始化NVIC寄存器</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>中断优先级设置步骤：</p>
<ol>
<li>系统运行后先设置中断优先级分组。调用函数：<br>void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);<br> （整个系统执行过程中，只设置一次中断分组。）</li>
<li>针对每个中断，设置对应的抢占优先级和响应优先级：<br>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</li>
<li>如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数即可。</li>
</ol>
</li>
</ul>
<hr>
<h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Init</span><span class="params">()</span></span>; <span class="comment">//串口初始化：波特率，数据字长，奇偶校验，硬件流控以及收发使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Cmd</span><span class="params">()</span></span>;<span class="comment">//使能串口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ITConfig</span><span class="params">()</span></span>;<span class="comment">//使能相关中断</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendData</span><span class="params">()</span></span>;<span class="comment">//发送数据到串口，DR</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">USART_ReceiveData</span><span class="params">()</span></span>;<span class="comment">//接受数据，从DR读取接受到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function">FlagStatus <span class="title">USART_GetFlagStatus</span><span class="params">()</span></span>;<span class="comment">//获取状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearFlag</span><span class="params">()</span></span>;<span class="comment">//清除状态标志位</span></span><br><span class="line"><span class="function">ITStatus <span class="title">USART_GetITStatus</span><span class="params">()</span></span>;<span class="comment">//获取中断状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearITPendingBit</span><span class="params">()</span></span>;<span class="comment">//清除中断状态标志位</span></span><br></pre></td></tr></table></figure>

<p>波特率计算方法</p>
<p><img src= "/img/loading.gif" data-src="/2020/08/06/stm32/2.png" alt="2"></p>
<p><img src= "/img/loading.gif" data-src="/2020/08/06/stm32/3.png" alt="3"></p>
<p>串口配置的一般步骤</p>
<ol>
<li>串口时钟使能，GPIO时钟使能:RCC_APB2PeriphClockCmd();</li>
<li>串口复位:USART_DeInit(); 这一步不是必须的</li>
<li>GPIO端口模式设置:GPIO_Init(); 模式设置为GPIO_Mode_AF_PP</li>
<li>串口参数初始化：USART_Init();</li>
<li>开启中断并且初始化NVIC（如果需要开启中断才需要这个步骤）<pre><code>NVIC_Init();
USART_ITConfig();</code></pre></li>
<li>使能串口:USART_Cmd();</li>
<li>编写中断处理函数：USARTx_IRQHandler();</li>
<li>串口数据收发：<br>void USART_SendData();//发送数据到串口，DR<br>uint16_t USART_ReceiveData();//接受数据，从DR读取接受到的数据</li>
<li>串口传输状态获取：<br>FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);<br>void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);</li>
</ol>
<hr>
<h2 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h2><ul>
<li><p><code>void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);</code><br>   //设置IO口与中断线的映射关系</p>
<p>   例:  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource2);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);</code><br> //初始化中断线：触发方式等</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> EXTI_Line;   <span class="comment">//指定要配置的中断线           </span></span><br><span class="line">  EXTIMode_TypeDef EXTI_Mode;   <span class="comment">//模式：事件 OR中断</span></span><br><span class="line">  EXTITrigger_TypeDef EXTI_Trigger;<span class="comment">//触发方式：上升沿/下降沿/双沿触发</span></span><br><span class="line">  FunctionalState EXTI_LineCmd;  <span class="comment">//使能 OR失能</span></span><br><span class="line">&#125;EXTI_InitTypeDef;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXTI_InitStructure.EXTI_Line=EXTI_Line2;	 </span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;	</span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure);</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><code>ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);</code><br>//判断中断线中断状态，是否发生</p>
</li>
<li><p><code>void EXTI_ClearITPendingBit(uint32_t EXTI_Line);</code><br>//清除中断线上的中断标志位</p>
</li>
<li><p>外部中断的一般配置步骤：</p>
<ol>
<li>初始化IO口为输入。<pre><code>GPIO_Init();</code></pre></li>
<li>开启IO口复用时钟。<pre><code>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</code></pre></li>
<li>设置IO口与中断线的映射关系。<pre><code>void GPIO_EXTILineConfig();</code></pre></li>
<li>初始化线上中断，设置触发条件等。<pre><code>EXTI_Init();</code></pre></li>
<li>配置中断分组（NVIC），并使能中断。<pre><code>NVIC_Init();</code></pre></li>
<li>编写中断服务函数。<pre><code>EXTIx_IRQHandler();</code></pre></li>
<li>清除中断标志位<pre><code>EXTI_ClearITPendingBit();</code></pre></li>
</ol>
</li>
</ul>
<hr>
<h2 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h2><ul>
<li><p>定时器参数初始化：         </p>
<p><code>void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Prescaler;        </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_CounterMode;     </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Period;        </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ClockDivision;  </span><br><span class="line">  <span class="keyword">uint8_t</span> TIM_RepetitionCounter;</span><br><span class="line">&#125; TIM_TimeBaseInitTypeDef;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TIM_TimeBaseStructure.TIM_Period = <span class="number">4999</span>; TIM_TimeBaseStructure.TIM_Prescaler =<span class="number">7199</span>; TIM_TimeBaseStructure.TIM_ClockDivision =   TIM_CKD_DIV1; TIM_TimeBaseStructure.TIM_CounterMode =   TIM_CounterMode_Up; </span><br><span class="line">TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure);</span><br></pre></td></tr></table></figure>
</li>
<li><p>定时器使能函数：</p>
<p><code>void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)</code></p>
</li>
<li><p>定时器中断使能函数：</p>
<p><code>void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);</code></p>
</li>
<li><p>状态标志位获取和清除：</p>
<p><code>FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);</code><br><code>void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);</code><br><code>ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);</code><br><code>void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);</code></p>
</li>
<li><p>定时器中断实现步骤</p>
<ol>
<li>能定时器时钟。<pre><code>RCC_APB1PeriphClockCmd();</code></pre></li>
<li>初始化定时器，配置ARR,PSC。<pre><code>TIM_TimeBaseInit();</code></pre></li>
<li>开启定时器中断，配置NVIC。<pre><code>void TIM_ITConfig();
NVIC_Init();</code></pre></li>
<li>使能定时器。<pre><code>TIM_Cmd();</code></pre></li>
<li>编写中断服务函数。<pre><code>TIMx_IRQHandler();</code></pre></li>
</ol>
</li>
</ul>
<hr>
<h2 id="PWM输出"><a href="#PWM输出" class="headerlink" title="PWM输出"></a>PWM输出</h2><ul>
<li><p>初始化：</p>
<p><code>void TIM_OCxInit(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCMode;  <span class="comment">//PWM模式1或者模式2</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OutputState; <span class="comment">//输出使能 OR失能</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OutputNState;</span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Pulse; <span class="comment">//比较值，写CCRx</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCPolarity; <span class="comment">//比较输出极性</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCNPolarity; </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCIdleState;  </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCNIdleState; </span><br><span class="line">&#125; TIM_OCInitTypeDef;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; <span class="comment">//PWM模式2</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; <span class="comment">//比较输出使能</span></span><br><span class="line">TIM_OCInitStructure. TIM_Pulse=<span class="number">100</span>;</span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; <span class="comment">//输出极性:TIM输出比较极性高</span></span><br><span class="line">TIM_OC2Init(TIM3, &amp;TIM_OCInitStructure);  <span class="comment">//根据T指定的参数初始化外设TIM3 OC2</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>设置比较值函数：</p>
<p><code>void TIM_SetCompareX(TIM_TypeDef* TIMx, uint16_t Compare2);</code></p>
</li>
<li><p>使能输出比较预装载：</p>
<p><code>void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);</code></p>
</li>
<li><p>使能自动重装载的预装载寄存器允许位：</p>
<p><code>void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);</code></p>
</li>
<li><p>PWM输出配置步骤：</p>
<ol>
<li>使能定时器3和相关IO口时钟。<pre><code>使能定时器3时钟：RCC_APB1PeriphClockCmd();
使能GPIOB时钟：RCC_APB2PeriphClockCmd();</code></pre></li>
<li>初始化IO口为复用功能输出。函数：GPIO_Init();<pre><code>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;      </code></pre></li>
<li>这里我们是要把PB5用作定时器的PWM输出引脚，所以要重映射配置，<pre><code>所以需要开启AFIO时钟。同时设置重映射。
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);
 GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE); </code></pre></li>
<li>初始化定时器：ARR,PSC等：TIM_TimeBaseInit();</li>
<li>初始化输出比较参数:TIM_OC2Init()</li>
<li>使能预装载寄存器： TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable); </li>
<li>使能定时器。TIM_Cmd();</li>
<li>不断改变比较值CCRx，达到不同的占空比效果:TIM_SetCompare2();</li>
</ol>
</li>
</ul>
<hr>
<h2 id="输入捕获"><a href="#输入捕获" class="headerlink" title="输入捕获"></a>输入捕获</h2><ul>
<li><p>初始化函数：</p>
<p><code>void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Channel; <span class="comment">//捕获通道1-4   </span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICPolarity; <span class="comment">//捕获极性</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICSelection; <span class="comment">//映射关系</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICPrescaler; <span class="comment">//分频系数</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICFilter;  <span class="comment">//滤波器</span></span><br><span class="line">&#125; TIM_ICInitTypeDef;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TIM5_ICInitStructure.TIM_Channel = TIM_Channel_1; TIM5_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;</span><br><span class="line">TIM5_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; </span><br><span class="line">TIM5_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;</span><br><span class="line">TIM5_ICInitStructure.TIM_ICFilter = <span class="number">0x00</span>;</span><br><span class="line">TIM_ICInit(TIM5, &amp;TIM5_ICInitStructure);</span><br></pre></td></tr></table></figure>
</li>
<li><p>通道极性设置独立函数：</p>
<p><code>void TIM_OCxPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)；</code></p>
</li>
<li><p>获取通道捕获值</p>
<p><code>uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)；</code></p>
</li>
</ul>
<ul>
<li><p>输入捕获的一般配置步骤：</p>
<ol>
<li>初始化定时器和通道对应IO的时钟。</li>
<li>初始化IO口，模式为输入：GPIO_Init();<pre><code>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; //PA0 输入</code></pre></li>
<li>初始化定时器ARR，PSC<br>TIM_TimeBaseInit();</li>
<li>初始化输入捕获通道<br>TIM_ICInit();</li>
<li>如果要开启捕获中断，<pre><code>TIM_ITConfig();
NVIC_Init();</code></pre></li>
<li>使能定时器：TIM_Cmd();</li>
<li>编写中断服务函数：TIMx_IRQHandler();</li>
</ol>
</li>
</ul>
<hr>
<h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2><p>DMA，全称Direct Memory Access，即直接存储器访问。</p>
<p>DMA的出现就是为了解决批量数据的输入/输出问题。DMA是指外部设备不通过CPU而直接与系统内存交换数据的接口技术。这样数据的传送速度就取决于存储器和外设的工作速度。</p>
<ul>
<li><p>初始化函数：</p>
<p><code>void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct);</code></p>
</li>
<li><p>2个使能函数:</p>
<ul>
<li><code>void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState);</code>//使能DMA通道</li>
<li><code>void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState);</code>//使能DMA通道中断</li>
</ul>
</li>
<li><p>2个传输数据量函数</p>
<ul>
<li><code>void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber);</code>//设置DMA通道的传输数据量（DMA处于关闭状态）</li>
<li><code>uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx);</code>//获取当前DMA通道传输剩余数据量（DMA处于开启状态）</li>
</ul>
</li>
<li><p>DMA的一般步骤</p>
<ul>
<li>使能DMA时钟。调用函数：<code>RCC_AHBPeriphClockCmd()</code>；</li>
<li>初始化DMA通道参数。调用函数：<code>DMA_Init()</code>；</li>
<li>使能串口DMA发送，串口DMA使能函数。调用函数：<code>USART_DMACmd()</code>；</li>
<li>使能DMA1通道，启动传输。调用函数：<code>DMA_Cmd()</code>；</li>
<li>查询DMA传输状态。调用函数：<code>DMA_GetFlagStatus()</code>；</li>
<li>获取/设置通道当前剩余数据量。调用函数：<code>DMA_GetCurrDataCounter()</code>；<code>DMA_SetCurrDataCounter()</code>。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
  <entry>
    <title>32单片机缩写</title>
    <url>/2020/08/07/stm32_EN/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>IRQ: Interrupt Request 中断请求</p>
<p>RCC: Rest and Clock Control 复位与时钟控制</p>
<p>HAL: Hardware Abstraction Layer硬件抽象层,代表HAL库</p>
<p>DMA: Direct Memory Access 直接内存存取</p>
<p>EX: extended 延伸，扩展</p>
<p>PWR: Power Controller 电源控制</p>
<p>Conf: configuration</p>
<p>It: interrupt</p>
<p>MSP: Mixed Signal Processor混合信号处理器</p>
<p>RSSI: Received Signal Strength Indication接收的信号强度指示</p>
<p>SNR: 信噪比SIGNAL-NOISE RATIO</p>
<p>上下行同信：上行（终端-&gt;网关；上传），下行（网关-&gt;终端；接收</p>
<p>EXTI: （External interrupt/event controller）—外部中断/事件控制器</p>
<p>idel: 空闲</p>
<p>RF_CAD:The radio is doing channel activity detection</p>
<p>FSK:Frequency-shift keying频移键控，是信息传输中使用得较早的一种调制方式,它的主要优点是: 实现起来较容易,抗噪声与抗衰减的性能较好。在中低速数据传输中得到了广泛的应用。</p>
<p>PHY: Port Physical Layer，中文可称之为端口物理层，是一个对OSI模型物理层的共同简称。</p>
<p>MAC：Media Access Control 介质访问控制</p>
<p>PLL: PhaseLockedLoop锁相环</p>
<p>APB: Advanced Peripheral BUS 外围总线</p>
<p>AHB，是Advanced High performance Bus的缩写，译作高级高性能总线，这是一种“系统总线”。</p>
<p>MSP: MCU Specific Package</p>
<p>Int 初始化 deint反初始化</p>
<p>Transmit：传输；传播；发射；传达；遗传，发送</p>
<p>Init：初始化（initialization）</p>
<p>clock：时钟；计时器</p>
<p>system：制度，体制；系统；方法</p>
<p>Config：配置，布局；显示配置信息命令</p>
<p>USART：代表串口(Universal Synchronous/Asynchronous Receiver/Transmitter)通用同步/异步串行接收/发送器</p>
<p>GPIO：general purpose input/output 代表引脚， （通用输入/输出）简称为GPIO</p>
<p>SPI：SPI是串行外设接口（Serial Peripheral Interface）的缩写</p>
<p>RTC：实时时钟（Real-Time Clock）</p>
<p>ADC：ADC,Analog-to-Digital Converter的缩写,指模/数转换器或者模数转换器</p>
<p>Channel： 通道；频道；海峡</p>
<p>ARM：Advanced RISC Machine</p>
<p>AAPCS：ARM Architecture Process call standard</p>
<p>ARM 体系结构过程调用标准</p>
<p>RISC： Reduced Instruction Set Computer 精简指令集计算机</p>
<p>RTOS：Real Time Operating System 实时操作系统</p>
<p>DMA：Direct Memory Access 存储器直接访问</p>
<p>EXTI: External Interrupts 外部中断</p>
<p>FSMC: Flexible static memory controller 可变静态存储控制器</p>
<p>FPB：flash patch and breakpoint FLASH 转换及断电单元</p>
<p>HSE：Hign speed external</p>
<p>HSI: High speed internal</p>
<p>LSE: Low Speed external</p>
<p>LSI: Low Speed Internal</p>
<p>LSU: load store unit 存取单元</p>
<p>PFU: prefetch unit 预取单元</p>
<p>ISR：Interrupt Service Routines 中断服务程序</p>
<p>NMI: Nonmaskable Interrupt 不可屏蔽中断</p>
<p>NVIC: Nested Vectored Interrupt Controller 嵌套向量中断控制器</p>
<p>MPU: Memory Protection Unit 内存保护单元</p>
<p>MIPS:million instructions per second 每秒能执行的百万条指令的条数</p>
<p>RCC：Reset and clock control 复位和时钟控制</p>
<p>RTC: Real-Time Clock 实时时钟</p>
<p>IWDG: independent watchdog 独立看门狗</p>
<p>WWDG：Window watchdog 窗口看门狗</p>
<p>TIM：timer 定时器</p>
<p>GAL:generic array logic 通用阵列逻辑</p>
<p>PAL:programmable array logic 可编程阵列逻辑</p>
<p>ASIC:Application Specific Integrated Circuit 专用集成电路</p>
<p>FPGA:Field－Programmable Gate Array 现场可编程门阵列</p>
<p>CPLD:Complex Programmable Logic Device 可编程逻辑器件</p>
<p>端口</p>
<p>AFIO：alternate function IO 复用 IO 端口</p>
<p>GPIO：general purpose input/output 通用 IO 端口</p>
<p>IOP（A-G）:IO port A - IO port G (例如：IOPA:IO port A)</p>
<p>CAN：Controller area network 控制器局域网</p>
<p>FLITF：The Flash memory interface 闪存存储器接口</p>
<p>I2C： Inter-integrated circuit 微集成电路</p>
<p>IIS： integrate interface of sound 集成音频接口</p>
<p>JTAG：joint test action group 联合测试行动小组</p>
<p>SPI：Serial Peripheral Interface 串行外围设备接口 SDIO: SD I/O</p>
<p>UART: Universal Synchr./Asynch. Receiver Transmitter 通用异步接收/发送装置</p>
<p>USB: Universal Serial Bus 通用串行总线</p>
<p>寄存器相关</p>
<p>CPSP： Current Program Status Register 当前程序状态寄存器</p>
<p>SPSP： saved program status register 程序状态备份寄存器</p>
<p>CSR：clock control/status register 时钟控制状态寄存器</p>
<p>LR： link register 链接寄存器</p>
<p>SP： stack pointer 堆栈指针</p>
<p>MSP: main stack pointer 主堆栈指针</p>
<p>PSP：process stack pointer</p>
]]></content>
      <tags>
        <tag>stm32</tag>
      </tags>
  </entry>
</search>
